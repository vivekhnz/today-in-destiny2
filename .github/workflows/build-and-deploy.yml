name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Calculate Build Version
        shell: pwsh
        run: |
          $buildVersion = .\build\get-build-version.ps1
          "BUILD_VERSION=$buildVersion" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Install Dependencies
        working-directory: ./app
        run: yarn install --frozen-lockfile --prefer-offline
      - name: Build
        working-directory: ./app
        run: yarn build
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build Tasks Docker Image
        shell: pwsh
        run: |
          $imageNameTag = .\build\build-tasks-image.ps1 -BuildVersion $env:BUILD_VERSION
          "DOCKER_IMAGE_NAME_TAG=$imageNameTag" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Bootstrap Terraform
        shell: pwsh
        env:
          AWS_DEFAULT_REGION: ${{ secrets.TERRAFORM_AWS_REGION }}
        run: |
          .\build\bootstrap-terraform.ps1 `
            -StateBucketName '${{ secrets.TERRAFORM_STATE_BUCKET_NAME }}' `
            -LockStateTableName '${{ secrets.TERRAFORM_LOCK_STATE_TABLE_NAME }}' `
            -AwsRegion '${{ secrets.TERRAFORM_AWS_REGION }}'
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET_NAME }}" \
          -backend-config="dynamodb_table=${{ secrets.TERRAFORM_LOCK_STATE_TABLE_NAME }}" \
          -backend-config="region=${{ secrets.TERRAFORM_AWS_REGION }}" \
          -input=false
      - name: Terraform Validate
        run: terraform validate
      - name: Terraform Apply
        env:
          TF_VAR_domain_name: ${{ secrets.WEBSITE_DOMAIN_NAME }}
          TF_VAR_destiny_character_id: ${{ secrets.DESTINY_CHARACTER_ID }}
        run: terraform apply -auto-approve -input=false
      - name: Deploy
        shell: pwsh
        run: |
          .\build\deploy.ps1 `
            -WebsiteS3Uri (terraform output -raw website_s3_uri) `
            -WebsiteCloudFrontDistributionId (terraform output -raw website_cloudfront_distribution_id) `
            -DataSourceUri (terraform output -raw data_source_uri) `
            -TasksContainerRepoUri (terraform output -raw tasks_container_repo_uri) `
            -DockerImageNameTag $env:DOCKER_IMAGE_NAME_TAG `
            -RefreshCurrentActivitiesLambdaFunctionArn (terraform output -raw refresh_current_activities_lambda_function_arn)
